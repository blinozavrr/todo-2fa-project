{\rtf1\ansi\deff0
{\fonttbl
{\f0\fnil\fcharset0 Calibri;}
}
\viewkind4\uc1\pard\f0\fs22

\b ToDoList with Two-Factor Authentication (2FA)\b0\par
\par
\b Table of Contents\b0\par
1. \b Overview\b0\par
2. \b Features\b0\par
3. \b Technologies\b0\par
4. \b Project Structure\b0\par
5. \b Installation & Local Setup\b0\par
   - Environment Variables\par
   - Running the App\par
6. \b API Endpoints\b0\par
7. \b Two-Factor Authentication (2FA)\b0\par
8. \b User Roles (RBAC)\b0\par
9. \b Deployment (Example on Render)\b0\par
10. \b License\b0\par

\par
\pard\fi720\sa200
\b Overview\b0\par
This is a \b ToDo List\b0 application featuring \b Two-Factor Authentication (2FA)\b0 via Google Authenticator, user roles (\i user\i0 and \i admin\i0 ), and a basic CRUD interface for tasks.\par
Key points:\par
- \b Users\b0 can register, enable 2FA, and manage their own tasks.\par
- \b Admins\b0 can view tasks for all users, create tasks for any user, and change user roles.\par

\pard\fi720\sa200
\b Features\b0\par
1. \b Registration\par\b0
   - Generates a 2FA secret and a QR code for Google Authenticator.\par
   - Users scan the QR code, then confirm a 6-digit TOTP code to enable 2FA.\par
2. \b Login\par\b0
   - Requires email/password.\par
   - If 2FA is enabled, also requires a TOTP code.\par
3. \b Task Management (CRUD)\par\b0
   - Regular users (\i user\i0 role) can manage only their own tasks.\par
   - \i admin\i0 role can view & manage tasks for all users.\par
4. \b User Profile\par\b0
   - Update email/password, etc.\par
   - Admins can promote/demote other users to/from \i admin\i0 .\par
5. \b Security\par\b0
   - Passwords hashed with \b bcrypt\b0 .\par
   - \b JWT\b0 for authentication (with middleware).\par
   - \b speakeasy\b0 for 2FA, \b qrcode\b0 for generating QR codes.\par

\pard\fi720\sa200
\b Technologies\b0\par
- \b Node.js + Express.js\b0 (backend)\par
- \b MongoDB\b0 (e.g., MongoDB Atlas)\par
- \b JWT\b0 (\i jsonwebtoken\i0 ) for token-based auth\par
- \b bcrypt\b0 for hashing passwords\par
- \b speakeasy\b0 + \b qrcode\b0 for 2FA\par
- \b React\b0 (Material UI) for the frontend\par

\pard\fi720\sa200
\b Project Structure\b0\par
{\pard\par
```\par
todo-2fa-project/\par
  ├─ client/\par
  │   ├─ public/\par
  │   ├─ src/\par
  │   └─ package.json\par
  ├─ server/\par
  │   ├─ config/db.js\par
  │   ├─ controllers/\par
  │   ├─ middlewares/\par
  │   ├─ models/\par
  │   ├─ routes/\par
  │   ├─ server.js\par
  │   └─ package.json\par
  ├─ package.json\par
  └─ README.md\par
```\par
}\par
- \b client\b0 : React (pages, components, etc.)\par
- \b server\b0 : Node/Express (routes, controllers, models)\par
- Optional: root-level \b package.json\b0 for monolithic build.\par

\pard\fi720\sa200
\b Installation & Local Setup\b0\par

\pard\fi720\sa200
\ul Environment Variables\ulnone\par
1. \b Clone\b the repo:\par
```\par
git clone https://github.com/username/todo-2fa-project.git\par
```\par
2. \b In the server folder\b , create .env:\par
```\par
PORT=4000\par
MONGO_URI=<your-mongodb-connection-string>\par
JWT_SECRET=<your-secret-for-jwt>\par
```\par
3. (Optional) If frontend needs special env, set .env in client.\par

\pard\fi720\sa200
\ul Running the App\ulnone\par
\i Option A: Separate (Dev)\i0\par
- \b Server:\b0\par
```\par
cd server\par
npm install\par
npm run dev\par
```\par
Runs on http://localhost:4000.\par

- \b Client:\b0\par
```\par
cd ../client\par
npm install\par
npm start\par
```\par
Runs on http://localhost:3000.\par

\pard\fi720
\i Option B: Monolithic\i0\par
1. At the root, if package.json is present:\par
```\par
{\b "scripts"}: \{\par
   "postinstall": "npm install --prefix client && npm run build --prefix client && npm install --prefix server",\par
   "start": "node server/server.js"\par
\}\par
```\par
2. Ensure server.js serves ../client/build.\par
3. Then:\par
```\par
npm install\par
npm run postinstall\par
npm start\par
```\par
4. App at http://localhost:4000.\par

\pard\fi720\sa200
\b API Endpoints\b0\par
(assuming /api/...)\par

\pard\fi720
\i Auth\par\i0
- POST /api/auth/register\par
- POST /api/auth/verify-2fa\par
- POST /api/auth/login\par

\i Users (private)\i0\par
- GET /api/users/profile\par
- PUT /api/users/profile\par
- GET /api/users (admin)\par
- PUT /api/users/:userId (admin)\par

\i Tasks (private)\i0\par
- POST /api/tasks\par
- GET /api/tasks\par
- GET /api/tasks/:id\par
- PUT /api/tasks/:id\par
- DELETE /api/tasks/:id\par

\pard\fi720\sa200
\b Two-Factor Authentication (2FA)\b0\par
- Registration: Generate secret + QR.\par
- Verify: 6-digit TOTP => enable 2FA.\par
- Login: if 2FA on, require TOTP.\par

\pard\fi720\sa200
\b User Roles (RBAC)\b0\par
- user: manages own tasks.\par
- admin: all tasks, see users, promote roles, etc.\par

\pard\fi720\sa200
\b Deployment (Example on Render)\b0\par
1. Push to GitHub.\par
2. On Render:\par
   - Static Site for React only or Web Service for monolithic.\par
3. Set env vars in Render → Environment.\par
4. If monolithic, root package.json might have:\par
```\par
{\b "scripts"}: \{\par
  "postinstall": "npm install --prefix client && npm run build --prefix client && npm install --prefix server",\par
  "start": "node server/server.js"\par
\}\par
```\par
5. Render builds & gives a live URL.\par

\pard\fi720\sa200
\b License\b0\par
```\par
MIT License\par
Copyright (c) 2025\par
\par
Permission is hereby granted, free of charge, to any person obtaining a copy\par
of this software and associated documentation files (the "Software"), to deal\par
in the Software without restriction...\par
```\par

}
